const express = require('express');
const router = express.Router();
const pool = require('../db');

// üìå –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø–æ–ª–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
router.get('/admin/users', async (req, res) => {
    try {
        const result = await pool.query(`
            SELECT 
                u.user_id,
                u.login,
                u.password,
                u.role_id,
                r.name AS role,
                e.first_name,
                e.last_name,
                e.patronymic,
                e.position
            FROM users u
            JOIN role r ON u.role_id = r.role_id
            LEFT JOIN employee e ON e.user_id = u.user_id
            ORDER BY u.user_id
        `);
        res.json(result.rows);
    } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', err);
        res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});

// üìå –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ä–æ–ª–µ–π
router.get('/admin/roles', async (req, res) => {
    try {
        const result = await pool.query(`SELECT role_id, name FROM role ORDER BY role_id`);
        res.json(result.rows);
    } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–æ–ª–µ–π:', err);
        res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});

// üìå –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ª–æ–≥–∏–Ω, —Ä–æ–ª—å, –§–ò–û, –¥–æ–ª–∂–Ω–æ—Å—Ç—å)
router.put('/admin/users/:userId', async (req, res) => {
    const { userId } = req.params;
    const { login, role, fullName, position } = req.body;

    try {
        if (!login || !role || !fullName || !position) {
            return res.status(400).json({ message: '–í—Å–µ –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è' });
        }

        const nameParts = fullName.trim().split(' ');
        if (nameParts.length < 2) {
            return res.status(400).json({ message: '–§–ò–û –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∫–∞–∫ –º–∏–Ω–∏–º—É–º —Ñ–∞–º–∏–ª–∏—é –∏ –∏–º—è' });
        }

        const [last_name, first_name, ...rest] = nameParts;
        const patronymic = rest.join(' ') || null;

        // –ù–∞–π—Ç–∏ role_id –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é —Ä–æ–ª–∏
        const roleResult = await pool.query(`SELECT role_id FROM role WHERE name = $1`, [role]);
        if (roleResult.rows.length === 0) {
            return res.status(400).json({ message: '–†–æ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
        }
        const role_id = roleResult.rows[0].role_id;

        // –û–±–Ω–æ–≤–∏—Ç—å –ª–æ–≥–∏–Ω –∏ —Ä–æ–ª—å
        await pool.query(
            `UPDATE users SET login = $1, role_id = $2 WHERE user_id = $3`,
            [login, role_id, userId]
        );

        // –û–±–Ω–æ–≤–∏—Ç—å –∏–ª–∏ –≤—Å—Ç–∞–≤–∏—Ç—å –≤ employee
        await pool.query(`
            INSERT INTO employee (user_id, last_name, first_name, patronymic, position)
            VALUES ($1, $2, $3, $4, $5)
            ON CONFLICT (user_id) DO UPDATE SET
                last_name = EXCLUDED.last_name,
                first_name = EXCLUDED.first_name,
                patronymic = EXCLUDED.patronymic,
                position = EXCLUDED.position
        `, [userId, last_name, first_name, patronymic, position]);

        res.json({ message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–±–Ω–æ–≤–ª—ë–Ω' });
    } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', err);
        res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});

// üìå –°–±—Ä–æ—Å–∏—Ç—å –ø–∞—Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
router.put('/admin/users/:userId/reset-password', async (req, res) => {
    const { userId } = req.params;
    const defaultPassword = '123456';

    try {
        await pool.query(
            `UPDATE users SET password = $1 WHERE user_id = $2`,
            [defaultPassword, userId]
        );
        res.json({ message: '–ü–∞—Ä–æ–ª—å —Å–±—Ä–æ—à–µ–Ω –¥–æ –∑–Ω–∞—á–µ–Ω–∏—è "123456"' });
    } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –ø–∞—Ä–æ–ª—è:', err);
        res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});

// üìå –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
router.delete('/admin/users/:userId', async (req, res) => {
    const { userId } = req.params;

    try {
        await pool.query(`DELETE FROM users WHERE user_id = $1`, [userId]);
        res.json({ message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª—ë–Ω' });
    } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', err);
        res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});

module.exports = router;
